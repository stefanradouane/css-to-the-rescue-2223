@import "./cube.css";
@import "./input.css";
@import "./home/home.css";
@import "./fieldset.css";
@import "./levels/all.css";
@import "./rotatecube.css";

@font-face {
    font-family: "Rocher";
    src: url("../assets/fonts/RocherColorGX.woff2");
}

@font-palette-values --base {
    font-family: "Rocher";
    base-palette: 2;
}

* {
    font-family: "Rocher";

    /* font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; */
    color: white;
    font-weight: 500;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-palette: --base;
}

html {
    overflow: hidden;
}

:root {
    --base-color: crimson;
    --dark-base-color: rgb(80 0 20);
    --object-size: 50px;
    --move-deg: 180deg;
    --base-offset: 1em;
    --current-level: "1";
    --curve: cubic-bezier(0.5, 1, 0.7, 1.4);
    --animation-timing: 500ms;
    /* --curve:cubic-bezier(.49,.99,.58,1.2); */
    /* --curve:cubic-bezier(.55,.2,.78,1.23); */
    /* --curve:cubic-bezier(.69,.99,.79,1.29); */
}

:root:has(input[name="end"]:checked) {
    --current-level: "loser";
}

:root:has(fieldset[data-layer="1"]:valid) {
    --current-level: "2";
}

:root:has(fieldset[data-layer="2"]:valid) {
    --current-level: "3";
}

@media only screen and (min-width: 500px) {
    :root {
        --object-size: 75px;
        --base-offset: 1.2em;
    }
}

@media only screen and (min-width: 1000px) {
    :root {
        --object-size: 100px;
        --base-offset: 1.4em;
    }
}

body {
    height: 100vh;
    height: 100dvh;
    width: 100%;

    background: var(--base-color);
    background: radial-gradient(circle,
            var(--base-color) 0%,
            var(--dark-base-color) 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    flex-direction: column;
    perspective: 800px;
}

body>form {
    display: contents;
}


header {
    position: absolute;
    inset: 0 0 auto 0;
    padding: var(--base-offset);
}

header p::after {
    content: var(--current-level);
    margin-left: calc(var(--base-offset) / 3);
}


/* V2 */

article {
    transition: 300ms all;
    position: relative;
    display: block;
    width: calc(var(--object-size) * 3);
    height: calc(var(--object-size) * 3);
    transform-style: preserve-3d;
    transform: rotateX(var(--h)) rotateY(var(--deg));
}

/* 
article span:not(article > span) {
    position: absolute;
    display: block;
    /* background: white; 
width: var(--object-size);
height: var(--object-size);
opacity: 0.9;
}

article>span {
    position: absolute;
    display: block;
    /* transition: 200ms; 
    background: transparent;
    transform-style: preserve-3d;
    width: calc(var(--object-size) * 3);
    height: calc(var(--object-size) * 3);
}

*/


section:has(input[name="end"]) {
    padding: var(--base-offset);
    position: absolute;
    left: 0;
    bottom: 0;
}

section:has(input[name="end"]:checked)+article>span {
    transform: rotate3d(0, 0, 0, 0) !important;
    /* transition: 200ms all!important; */
    /* animation: none !important; */
}

/* Box puzzle */

section:has(input[name="box-puzzle"]) {
    position: absolute;
    bottom: 0;
    right: 0;
    height: calc(calc(var(--object-size) * 3) + calc(var(--base-offset) * 4));
    width: calc(calc(var(--object-size) * 2) + calc(var(--base-offset) * 3));
    /* padding: var(--base-offset); */
}

fieldset:has(input[name="box-puzzle"]) {
    display: block;
    position: absolute;
    bottom: 0;
    right: 0;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--base-offset);
    border: none;
    padding: var(--base-offset);
}

/* 
fieldset[data-layer="2"]{
}

fieldset[data-layer="3"]{
    transform: translateX(100%);
}

fieldset[data-layer="4"]{
    transform: translateX(100%);
} */

/* section:has(input[name="box-puzzle"]) > section{
    
} */

/* SPIN CUBE */
section:has(section:has(fieldset[data-layer="2"]:valid))+section+article>span:nth-child(5):nth-child(5) {
    /* transform: rotateX(calc(var(--move-deg) * 2.5)) rotateY(calc(var(--move-deg) * 1)); */
}

section:has(section:has(fieldset[data-layer="2"]:valid))+section+article>span:nth-child(n + 12):nth-child(-n + 14) {
    /* transform: rotateX(calc(var(--move-deg) * 0)) rotateY(calc(var(--move-deg) * 2)); */
}

@keyframes fadeOut {
    0% {
        transform: translateX(0);
        transform: translateY(0);
    }

    100% {
        opacity: 0;
        transform: translateY(100%);
    }
}

@keyframes fadeIn {
    0% {
        opacity: 0;
        transform: translateX(100%);
    }

    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes next {
    0% {
        opacity: 0;
        transform: translateY(-100%);
    }

    20% {
        opacity: 1;
        transform: translateY(-200%);
        font-size: 2em;
    }

    100% {
        opacity: 0;
        transform: translateY(0);
    }
}

@keyframes next2 {
    0% {
        opacity: 0;
        transform: translateY(-100%);
    }

    20% {
        opacity: 1;
        transform: translateY(-200%);
        font-size: 2em;
    }

    100% {
        opacity: 0;
        transform: translateY(0);
    }
}


/*
input[data-puzzle="box-game"] {
    position: absolute;
    appearance: none;
    display: block;
    height: var(--object-size);
    width: var(--object-size);
    background: grey;
}

input[data-puzzle="box-game"]:checked {
    background: #333;
}

input[data-puzzle="box-game"]:nth-of-type(1) {
    left: -40%;
}

input[data-puzzle="box-game"]:nth-of-type(2) {
    left: calc(-40% - calc(var(--object-size) * 1));
}

input[data-puzzle="box-game"]:nth-of-type(3) {
    left: calc(-40% - calc(var(--object-size) * 1));
    transform: translateY(-100%);
}

input[data-puzzle="box-game"]:nth-of-type(4) {
    left: calc(-40% - calc(var(--object-size) * 0));
    transform: translateY(-100%);
    z-index: 1;
}

input[data-puzzle="box-game"]:nth-of-type(4):checked {
    z-index: -1;
}

input[data-puzzle="box-game"]:nth-of-type(5) {
    left: calc(-40% - calc(var(--object-size) * 0));
    transform: translateY(-200%);
    z-index: 1;
}

input[data-puzzle="box-game"]:nth-of-type(6) {
    left: calc(-40% - calc(var(--object-size) * 1));
    transform: translateY(-200%);
    z-index: 1;
}

input[data-puzzle="box-game"]:last-of-type {
    left: calc(-40% - calc(var(--object-size) * 0));
    transform: translateY(-100%);
    background: #333;
}

input[data-puzzle="box-game"]:last-of-type:checked {
    left: calc(-40% - calc(var(--object-size) * 0));
    transform: translateY(-100%);
    background: grey;
    z-index: -2;
}

input[name="boxTry1"]:checked +

input[name="boxTry1"]:checked + article > span:nth-child(1):nth-child(1){
    transform: rotateX(calc(var(--move-deg) * 2)) rotateY(calc(var(--move-deg) * 1.5));
}

input[name="boxTry1"]:checked + article > span:nth-child(n+3):nth-child(-n+5){
    transform: rotateX(calc(var(--move-deg) * 2)) rotateY(calc(var(--move-deg) * 1.5));
} */
/* 

input[data-puzzle="box-game"]:nth-of-type(2) {
    position: absolute;
    left: -45%;
    height: 100px;
}
input[data-puzzle="box-game"]:nth-of-type(3) {
    position: absolute;
    left: -50%;
    height: 100px;
}

article > span:nth-child(2):nth-child(2){
    transform: rotateX(calc(var(--move-deg) * 0)) rotateY(calc(var(--move-deg) * 0));
}



input[data-puzzle="box-game"]:nth-of-type(3):checked + input[data-puzzle="box-game"]:nth-of-type(4):checked + article > span:nth-child(2):nth-child(2){
    transform: rotateX(calc(var(--move-deg) * 1.5)) rotateY(calc(var(--move-deg) * 2));
}

input[data-puzzle="box-game"]:nth-of-type(4) {
    position: absolute;
    left: -55%;
    height: 100px;
} */